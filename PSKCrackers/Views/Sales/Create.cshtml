@model PSKCrackers.Models.Sale

@{
    ViewData["Title"] = "Create";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<h1>Create</h1>

<h4>Sale</h4>
<!-- Available Stock Section -->
<div class="container mt-4">
    <div class="row">
        <!-- Available Stock Section -->
        <div class="col-lg-4">
            <h2>Available Stock</h2>
            <table class="table table-striped" id="availableStockTable" style="display: block; overflow: scroll; max-height: 450px;overflow-x: hidden;">
                <thead>
                    <tr>
                        <th style="display:none;">ProductID</th>
                        <th>Product</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Stocck items will be dynamically added here -->
                </tbody>
            </table>
        </div>

        <!-- Cart Items Section -->
        <div class="col-lg-4">
            <h2>Cart Items</h2>
            <table class="table table-striped" id="cartTable" style="display: block; overflow: scroll; max-height: 450px;overflow-x: hidden;">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Subtotal</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Cart items will be dynamically added here -->
                </tbody>
            </table>
        </div>

        <!-- Total Amount Calculation Section -->
        <div class="col-lg-4">
            <div class="row">
                <h2>Customer Details</h2>
                <table class="table" id="customerDetailsTable">
                    <tbody>
                        <tr>
                            <td>Phone Number:</td>
                            <td>
                                <input type="tel" id="txtCustomerContact" value="" required="required" />
                            </td>
                        </tr>
                        <tr>
                            <td>
                            </td>
                            <td>
                                <button id="btnCheckUserClear" class="btn btn-warning">Clear</button>
                                <button id="btnCheckUser" class="btn btn-primary">Check User</button>
                            </td>
                        </tr>
                        <tr id="customerInfoRow" style="display: none;">
                            <td>Name:</td>
                            <td>
                                <input type="text" id="txtCustomerName" value="" required="required" />
                                <input type="text" id="txtCustomerID" style="visibility:hidden;" />
                            </td>
                        </tr>
                        <tr id="customerAddressRow" style="display: none;">
                            <td>Address:</td>
                            <td>
                                <input type="text" id="txtCustomerAddress" value="" required="required" />
                            </td>
                        </tr>
                    </tbody>
                </table>

            </div>
            <div class="row">
                <h2>Total Amount Calculation</h2>
                <table class="table" id="totalAmountTable">
                    <tbody>
                        @* <tr>
                        <td>Customer:</td>
                        <td>
                        <select id="SelectedCustomer" asp-for="CustomerId" class="form-control" asp-items="ViewBag.CustomerId"></select>
                        </td>
                        </tr>*@
                        <tr>
                            <td>Total Amount:</td>
                            <td id="totalAmount">₹0.00</td>
                        </tr>
                        <tr>
                            <td>Discount %:</td>
                            <td>
                                <input type="number" id="discount" class="form-control">
                            </td>
                        </tr>
                        <tr>
                            <td>Discounted Total:</td>
                            <td id="calculatedTotal">₹0.00</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <button type="button" class="btn btn-primary" id="SaveInvoice">Save Invoice</button> <!-- Add Print Invoice button -->
            <button type="button" class="btn btn-info" id="DraftInvoice">Save Draft</button>
            <button type="button" class="btn btn-secondary" id="printInvoice">Print Invoice</button> <!-- Add Print Invoice button -->
        </div>
    </div>
</div>


<div>
    <a asp-controller="Sales" asp-action="Index" class="btn btn-cancel">Sales List</a> | 
    <a asp-controller="PendingOrders" asp-action="Index" class="btn btn-cancel">Pending Orders List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            // Sample available stock data (you can load this data dynamically)
            //var availableStock = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.AvailableStock))');
            var availableStock = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
            ViewBag.AvailableStock,
            Newtonsoft.Json.Formatting.None,new Newtonsoft.Json.JsonSerializerSettings{
            ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
            }));

            // Initialize the cart as an empty array
            const cart = [];

            // Function to populate the available stock table
            function populateAvailableStockTable() {
                const table = $("#availableStockTable");
                table.find("tr:gt(0)").remove(); // Clear existing rows
                availableStock.forEach(item => {
                    table.append(`<tr><td style="display:none;">${item.Product.ProductId}</td><td>${item.Product.Name}</td><td>₹${item.Product.Price.toFixed(2)}</td><td>${item.QuantityInStock}</td><td><button type="button" class="btn btn-success">Add</button></td></tr>`);
                });
            }


            // Function to populate the cart table and update total amount
            function updateCartAndTotal() {
                const table = $("#cartTable");
                table.find("tr:gt(0)").remove(); // Clear existing rows
                let totalAmount = 0;

                cart.forEach(item => {
                    const subtotal = item.Product.Price * item.QuantityInCart;
                    totalAmount += subtotal;
                    const row = `<tr data-productid="${item.Product.ProductId}">
                                                                                                                                                                                                <td>${item.Product.Name}</td>
                                                                                                                                                                                                <td>₹${item.Product.Price.toFixed(2)}</td>
                                                                                                                                                                                                <td>
                                                                                                                                                                                                    <span class="cart-quantity">${item.QuantityInCart}</span>
                                                                                                                                                                                                    <button class="btn btn-sm btn-primary reduce-quantity" data-productid="${item.Product.ProductId}">-</button>
                                                                                                                                                                                                </td>
                                                                                                                                                                                                <td>₹${subtotal.toFixed(2)}</td>
                                                                                                                                                                                                <td><button class="btn btn-sm btn-danger remove-item" data-productid="${item.Product.ProductId}">Remove</button></td>
                                                                                                                                                                                            </tr>`;
                    table.append(row);
                });

                // Update the total amount
                var discVal = $("#discount").val();
                if (!discVal || discVal == "") { discVal = "0"; }
                const discountPercentage = parseFloat(discVal);
                const discountAmount = (discountPercentage / 100) * totalAmount; // Calculate discount amount
                const discountedTotalAmount = totalAmount - discountAmount; // Apply discount
                $("#totalAmount").text(`₹${totalAmount.toFixed(2)}`);

                // Update the calculated total with discount applied
                $("#calculatedTotal").text(`₹${discountedTotalAmount.toFixed(2)}`);
            }

            // Add item to the cart when a row in available stock is clicked
            $("#availableStockTable").on("click", "tr", function () {
                const row = $(this);
                const productId = row.find("td:first").text();
                const product = availableStock.find(item => item.ProductId === parseInt(productId));

                if (product && product.QuantityInStock > 0) {
                    // Check if the product is already in the cart
                    const cartItemIndex = cart.findIndex(item => item.Product.ProductId === product.ProductId);

                    if (cartItemIndex !== -1) {
                        // If the product is in the cart, increase its quantity by 1
                        cart[cartItemIndex].QuantityInCart++;
                    } else {
                        // If the product is not in the cart, add it with a quantity of 1
                        const cartItem = { ...product, QuantityInCart: 1 }; // Clone the item
                        cart.push(cartItem);
                    }
                    // Decrease available quantity by 1
                    product.QuantityInStock--;

                    updateCartAndTotal();
                    populateAvailableStockTable();
                }
            });

            // Handle discount input change
            $("#discount").on("input", function () {
                updateCartAndTotal();
            });

            function getCurrentDateFormatted() {
                const months = [
                    "January", "February", "March", "April", "May", "June",
                    "July", "August", "September", "October", "November", "December"
                ];

                const currentDate = new Date();
                const month = months[currentDate.getMonth()];
                const day = currentDate.getDate();
                const year = currentDate.getFullYear();

                return `${month} ${day}, ${year}`;
            }

            // Reduce quantity of an item when the "-" button is clicked
            $("#cartTable").on("click", ".reduce-quantity", function () {
                const productId = $(this).data("productid");
                const cartItem = cart.find(item => item.Product.ProductId === productId);

                if (cartItem && cartItem.QuantityInCart > 1) {
                    // Reduce the quantity by 1
                    cartItem.QuantityInCart--;
                    // Increase available quantity by 1
                    const product = availableStock.find(item => item.ProductId === productId);
                    product.QuantityInStock++;
                    updateCartAndTotal();
                    populateAvailableStockTable();
                }
            });

            // Remove item from the cart when the "Remove" button is clicked
            $("#cartTable").on("click", ".remove-item", function () {
                const productId = $(this).data("productid");
                const cartItemIndex = cart.findIndex(item => item.Product.ProductId === productId);

                if (cartItemIndex !== -1) {
                    // Increase available quantity
                    const product = availableStock.find(item => item.ProductId === productId);
                    product.QuantityInStock += cart[cartItemIndex].QuantityInCart;

                    // Remove the item from the cart
                    cart.splice(cartItemIndex, 1);
                    updateCartAndTotal();
                    populateAvailableStockTable();
                }
            });

            // Initial population of available stock table
            populateAvailableStockTable();

            function PrintInvoice(saleID = "") {
                var discount = $("#discount").val();
                var totalAmount = $("#totalAmount").text();
                var calculatedTotal = $("#calculatedTotal").text();

                const CustomerNumber = document.getElementById("txtCustomerContact").value;
                const CustomerName = document.getElementById("txtCustomerName").value;
                const CustomerID = document.getElementById("txtCustomerID").value;
                const CustomerAddress = document.getElementById("txtCustomerAddress").value;

                if (!discount) {
                    discount = 0;
                }

                const printWindow = window.open('', '', 'width=800, height=600');
                printWindow.document.open();
                printWindow.document.write('<!DOCTYPE html>          \
                                                                     <html>                                                               \
                                                                     <head>                                                               \
                                                                         <meta charset="UTF-8">                                           \
                                                                         <title>Invoice</title>                                           \
                                                                         <style>                                                          \
                                                                             body {                                                       \
                                                                                 font-family: Arial, sans-serif;                          \
                                                                             }                                                            \
                                                                             .invoice {                                                   \
                                                                                 margin: 0 auto;                                          \
                                                                                 width: 98%;                                              \
                                                                             }                                                            \
                                                                             .header {                                                    \
                                                                                 text-align: center;                                      \
                                                                                 background-color: #f2f2f2;                               \
                                                                                 padding: 10px;                                           \
                                                                             }                                                            \
                                                                             .invoice-details {                                           \
                                                                                 margin-top: 20px;                                        \
                                                                             }                                                            \
                                                                             .invoice-details h2 {                                        \
                                                                                 border-bottom: 1px solid #ddd;                           \
                                                                                 padding-bottom: 5px;                                     \
                                                                             }                                                            \
                                                                             .invoice-details .info {                                     \
                                                                                 margin-top: 10px;                                        \
                                                                             }                                                            \
                                                                             .invoice-table {                                             \
                                                                                 margin-top: 20px;                                        \
                                                                                 border-collapse: collapse;                               \
                                                                                 width: 100%;                                             \
                                                                             }                                                            \
                                                                             .invoice-table th, .invoice-table td {                       \
                                                                                 border: 1px solid #ddd;                                  \
                                                                                 padding: 8px;                                            \
                                                                                 text-align: left;                                        \
                                                                             }                                                            \
                                                                             .invoice-table th {                                          \
                                                                                 background-color: #f2f2f2;                               \
                                                                             }                                                            \
                                                                             .invoice-total {                                             \
                                                                                 margin-top: 20px;                                        \
                                                                                 text-align: right;                                       \
                                                                             }                                                            \
                                                                             .discount {                                                  \
                                                                                 margin-top: 10px;                                        \
                                                                                 text-align: right;                                       \
                                                                             }                                                            \
                .customerLeft {\
                            text-align: left;\
                    }\
                                                                         </style>                                                         \
                                                                     </head>                                                              \
                                                                     <body>                                                               \
                                                                         <div class="invoice">                                            \
                                                                             <div class="header">                                         \
                                                                                         <img src="/img/logo.png" style="width: 100px; float: left;"> <h1>PSK Fancy Crackers - Invoice</h1>                           \
                                                                             </div>                                                       \
                                                                             <div class="invoice-details">                                \
                                                                                 <h2>Invoice Details</h2>                                 \
                                                                             <div class="info">');

                if (saleID) {
                    printWindow.document.write('<p style="float: left;"><strong>Invoice No:</strong> ' + saleID + '</p>');
                }

                printWindow.document.write('<p style="float: right;"><strong>Date:</strong> ' + getCurrentDateFormatted() + '</p>');

                printWindow.document.write('</div>   \
                                                                    </div>                                       \
                                                                    <table class="invoice-table">                \
                                                                        <thead>                                  \
                                                                            <tr>                                 \
                                                                                <th>Item</th>                    \
                                                                                <th>Quantity</th>                \
                                                                                <th>Unit Price</th>              \
                                                                                <th>Total</th>                   \
                                                                            </tr>                                \
                                                                        </thead>                                 \
                                                                        <tbody>');
                debugger;
                cart.forEach(item => {
                    const subtotal = item.Product.Price * item.QuantityInCart;

                    printWindow.document.write('<tr>  \
                                                                        <td>'+ item.Product.Name + '</td>                   \
                                                                        <td>'+ item.QuantityInCart + '</td>                        \
                                                                        <td>₹ '+ item.Product.Price.toFixed(2) + '</td>                   \
                                                                        <td>₹ '+ subtotal.toFixed(2) + '</td>                  \
                                                                        </tr>');
                });

                printWindow.document.write('</tbody></table>');

                printWindow.document.write('<div style="float:left;"><div class="invoice-total customerLeft">\
                                                                                     <p><strong>Customer Name:</strong> '+ CustomerName + '</p>\
                                                                            </div>');

                printWindow.document.write('<div class="discount customerLeft">\
                                                                                      <p><strong>Customer Address:</strong> '+ CustomerAddress + '</p>\
                                                                            </div>');

                printWindow.document.write('<div class="invoice-total customerLeft">\
                                                                                       <p><strong>Customer Mobile Number:</strong> '+ CustomerNumber + '</p>\
                                                                            </div>');

                printWindow.document.write('</div></div>');

                printWindow.document.write('<div><div class="invoice-total">\
                                                                     <p><strong>Total without discount:</strong> '+ totalAmount + '</p>\
                                                                    </div>');

                printWindow.document.write('<div class="discount">\
                                                                      <p><strong>Discount:</strong> '+ discount + ' %</p>\
                                                                    </div>');

                printWindow.document.write('<div class="invoice-total">\
                                                                       <p><strong>Total:</strong> '+ calculatedTotal + '</p>\
                                                                    </div>');

                printWindow.document.write('</div></div>');


                printWindow.document.close();

                printWindow.print();
                printWindow.close();
            }

            $("#printInvoice").on("click", function () {
                PrintInvoice();
            });

            // Remove item from the cart when the "Remove" button is clicked
            $("#SaveInvoice").on("click", function () {
                // Create a Sale object with the cart items and other details
                const CustomerNumber = document.getElementById("txtCustomerContact").value;
                const CustomerName = document.getElementById("txtCustomerName").value;
                const CustomerID = document.getElementById("txtCustomerID").value;
                const CustomerAddress = document.getElementById("txtCustomerAddress").value;

                if (!document.getElementById("btnCheckUser").disabled) {
                    alert("User Not Validated. Click on Check user.");
                    return;
                }

                if (!CustomerNumber || CustomerNumber == "") {
                    alert("Customer Number is empty.");
                    return;
                }

                if (!CustomerName || CustomerName == "") {
                    alert("Customer Name is empty.");
                    return;
                }

                if (!CustomerAddress || CustomerAddress == "") {
                    alert("Customer Address is empty.");
                    return;
                }

                const sale = {
                    saleItems: cart,
                    totalAmount: parseFloat($("#totalAmount").text().replace("₹", "")),
                    discountPercentage: parseFloat($("#discount").val()),
                    discountedTotal: parseFloat($("#calculatedTotal").text().replace("₹", "")),
                    iIsConfirmedOrder: true,
                    customer: {
                        customerId: CustomerID,
                        name: CustomerName,
                        phoneNumber: CustomerNumber,
                        address: CustomerAddress
                    }
                };

                fetch('/Sales/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(sale)
                })
                    .then(response => response.json())
                    .then(response => {
                        if (response && response.saleId) {
                            const SaleID = response.saleId;
                            PrintInvoice(SaleID);
                            window.location.href = '/Sales';
                        } else {
                            // Handle errors
                            alert('Failed to save sale data.');
                        }
                    })
                    .catch(error => {
                        debugger;
                        alert('Error:', error);
                    });

            });


            // Remove item from the cart when the "Remove" button is clicked
            $("#DraftInvoice").on("click", function () {
                // Create a Sale object with the cart items and other details
                const CustomerNumber = document.getElementById("txtCustomerContact").value;
                const CustomerName = document.getElementById("txtCustomerName").value;
                const CustomerID = document.getElementById("txtCustomerID").value;
                const CustomerAddress = document.getElementById("txtCustomerAddress").value;

                if (!document.getElementById("btnCheckUser").disabled) {
                    alert("User Not Validated. Click on Check user.");
                    return;
                }

                if (!CustomerNumber || CustomerNumber == "") {
                    alert("Customer Number is empty.");
                    return;
                }

                if (!CustomerName || CustomerName == "") {
                    alert("Customer Name is empty.");
                    return;
                }

                if (!CustomerAddress || CustomerAddress == "") {
                    alert("Customer Address is empty.");
                    return;
                }

                const sale = {
                    saleItems: cart,
                    totalAmount: parseFloat($("#totalAmount").text().replace("₹", "")),
                    discountPercentage: parseFloat($("#discount").val()),
                    discountedTotal: parseFloat($("#calculatedTotal").text().replace("₹", "")),
                    iIsConfirmedOrder: false,
                    customer: {
                        customerId: CustomerID,
                        name: CustomerName,
                        phoneNumber: CustomerNumber,
                        address: CustomerAddress
                    }
                };

                fetch('/Sales/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(sale)
                })
                    .then(response => response.json())
                    .then(response => {
                        if (response && response.saleId) {
                            const SaleID = response.saleId;
                            PrintInvoice(SaleID);
                            window.location.href = '/PendingOrders';
                        } else {
                            // Handle errors
                            alert('Failed to save sale data.');
                        }
                    })
                    .catch(error => {
                        debugger;
                        alert('Error:', error);
                    });

            });

            // Function to make an API call to check if the user exists
            function checkUserExists(phoneNumber) {
                if (phoneNumber && phoneNumber != "") {
                    // Make an API request to check if the user exists
                    // You can use XMLHttpRequest or fetch API for this purpose
                    fetch(`/Sales/checkUser?phoneNumber=${phoneNumber}`)
                        .then(response => response.json())
                        .then(data => {
                            document.getElementById("txtCustomerContact").disabled = true;
                            document.getElementById("btnCheckUser").disabled = true;
                            if (data && data.customerId & data.customerId != 0) {
                                // User exists, show name and address
                                document.getElementById("txtCustomerName").value = data.name;
                                document.getElementById("txtCustomerID").value = data.customerId;
                                document.getElementById("txtCustomerAddress").value = data.address;

                                document.getElementById("txtCustomerName").disabled = true;
                                document.getElementById("txtCustomerAddress").disabled = true;

                                document.getElementById("customerInfoRow").style.display = "table-row";
                                document.getElementById("customerAddressRow").style.display = "table-row";
                            } else {
                                document.getElementById("txtCustomerID").value = "0";
                                document.getElementById("txtCustomerName").disabled = false;
                                document.getElementById("txtCustomerAddress").disabled = false;

                                // User does not exist, allow entry
                                document.getElementById("customerInfoRow").style.display = "table-row";
                                document.getElementById("customerAddressRow").style.display = "table-row";
                            }
                        })
                        .catch(error => {
                            debugger;
                            console.error('API Error:', error);
                            alert(error);
                        });
                } else {
                    alert("Please enter a valid phone number");
                }
            }

            // Event listener for the "Check User" button
            document.getElementById("btnCheckUser").addEventListener("click", function () {
                const phoneNumber = document.getElementById("txtCustomerContact").value;
                checkUserExists(phoneNumber);
            });

            // Event listener for the "Check User" button
            document.getElementById("btnCheckUserClear").addEventListener("click", function () {
                document.getElementById("txtCustomerContact").disabled = false;
                document.getElementById("btnCheckUser").disabled = false;
                document.getElementById("txtCustomerName").disabled = false;
                document.getElementById("txtCustomerAddress").disabled = false;
                document.getElementById("txtCustomerName").value = "";
                document.getElementById("txtCustomerID").value = "";
                document.getElementById("txtCustomerAddress").value = "";
                document.getElementById("txtCustomerContact").value = "";
                document.getElementById("customerInfoRow").style.display = "none";
                document.getElementById("customerAddressRow").style.display = "none";
            });

            // Function to handle "Enter" key press in the textbox
            function handleKeyPress(event) {
                if (event.key === "Enter") {
                    event.preventDefault(); // Prevent the default form submission
                    const phoneNumber = document.getElementById("txtCustomerContact").value;
                    checkUserExists(phoneNumber);
                }
            }

            // Add event listener to the textbox
            document.getElementById("txtCustomerContact").addEventListener("keydown", handleKeyPress);


        });

    </script>
}
