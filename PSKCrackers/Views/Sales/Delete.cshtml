@model PSKCrackers.Models.Sale

@{
    ViewData["Title"] = "Delete";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Sale</h4>
    <hr />
    <!-- Available Stock Section -->
    <div class="container mt-4">
        <div class="row">
            <!-- Available Stock Section -->
            <div class="col-lg-4">
                <h2>Available Stock</h2>
                <table class="table table-striped" id="availableStockTable">
                    <thead>
                        <tr>
                            <th style="display:none;">ProductID</th>
                            <th>Product</th>
                            <th>Price</th>
                            <th>Quantity</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Stocck items will be dynamically added here -->
                    </tbody>
                </table>
            </div>

            <!-- Cart Items Section -->
            <div class="col-lg-4">
                <h2>Cart Items</h2>
                <table class="table table-striped" id="cartTable">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Price</th>
                            <th>Quantity</th>
                            <th>Subtotal</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Cart items will be dynamically added here -->
                    </tbody>
                </table>
            </div>

            <!-- Total Amount Calculation Section -->
            <div class="col-lg-4">
                <h2>Total Amount Calculation</h2>
                <table class="table" id="totalAmountTable">
                    <tbody>
                        <tr>
                            <td>SaleDate:</td>
                            <td>
                                @Html.DisplayFor(u=> u.SaleDate)
                            </td>
                        </tr>
                        <tr>
                            <td>Customer:</td>
                            <td>
                                @Html.DisplayFor(u=> u.Customer.Name)
                            </td>
                        </tr>
                        <tr>
                            <td>Total Amount:</td>
                            <td id="totalAmount">₹0.00</td>
                        </tr>
                        <tr>
                            <td>Discount %:</td>
                            <td id="discount">
                                @Html.DisplayFor(u=> u.DiscountPercentage)
                            </td>
                        </tr>
                        <tr>
                            <td>Discounted Total:</td>
                            <td id="calculatedTotal">₹0.00</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="SaleId" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index" class="btn btn-cancel">Back to List</a>
    </form>
</div>

@section Scripts {

    <script>
        $(document).ready(function () {
            // Sample available stock data (you can load this data dynamically)
            //var availableStock = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.AvailableStock))');
            var availableStock = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
            ViewBag.AvailableStock,
            Newtonsoft.Json.Formatting.None,new Newtonsoft.Json.JsonSerializerSettings{
            ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
            }));

            // Initialize the cart as an empty array
            //const cart = JSON.parse('@Html.Raw(Json.Serialize(Model.SaleItems))');
            var cart = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
            Model.SaleItems,
            Newtonsoft.Json.Formatting.None,new Newtonsoft.Json.JsonSerializerSettings{
            ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
            }));

            // Function to populate the available stock table
            function populateAvailableStockTable() {
                const table = $("#availableStockTable");
                table.find("tr:gt(0)").remove(); // Clear existing rows
                availableStock.forEach(item => {
                    table.append(`<tr><td style="display:none;">${item.Product.ProductId}</td><td>${item.Product.Name}</td><td>₹${item.Product.Price.toFixed(2)}</td><td>${item.QuantityInStock}</td></tr>`);
                });
            }


            // Function to populate the cart table and update total amount
            function updateCartAndTotal() {
                const table = $("#cartTable");
                table.find("tr:gt(0)").remove(); // Clear existing rows
                let totalAmount = 0;

                cart.forEach(item => {
                    const subtotal = item.Product.Price * item.QuantityInCart;
                    totalAmount += subtotal;
                    const row = `<tr data-productid="${item.Product.ProductId}">
                                                                <td>${item.Product.Name}</td>
                                                                <td>₹${item.Product.Price.toFixed(2)}</td>
                                                                <td>
                                                                    <span class="cart-quantity">${item.QuantityInCart}</span>
                                                                </td>
                                                                <td>₹${subtotal.toFixed(2)}</td>
                                                            </tr>`;
                    table.append(row);
                });

                // Update the total amount
                var discVal = $("#discount").text();
                debugger;
                if (!discVal || discVal == "") { discVal = "0"; } else {
                    discVal = discVal.replace("%", "");
                }
                var discountPercentage = parseFloat(discVal);
                if (isNaN(discountPercentage)) { discountPercentage = 0; }
                const discountAmount = (discountPercentage / 100) * totalAmount; // Calculate discount amount
                const discountedTotalAmount = totalAmount - discountAmount; // Apply discount
                $("#totalAmount").text(`₹${totalAmount.toFixed(2)}`);

                // Update the calculated total with discount applied
                $("#calculatedTotal").text(`₹${discountedTotalAmount.toFixed(2)}`);
            }

            // Initial population of available stock table
            populateAvailableStockTable();
            updateCartAndTotal();

            $("#printInvoice").on("click", function () {

                const cartTable = document.getElementById("cartTable");
                const totalAmount = document.getElementById("totalAmountTable");
                const cartItems = Array.from(cartTable.querySelectorAll("tbody tr"));
                const invoiceContents = cartTable.outerHTML + totalAmount.outerHTML;

                const printWindow = window.open('', '', 'width=800, height=600');
                printWindow.document.open();
                printWindow.document.write('<html><head><title>Invoice</title></head><body>');

                // Add cart items to the invoice with inline styles for formatting
                printWindow.document.write('<h2>Cart Items</h2>');
                printWindow.document.write('<table style="width: 100%; border-collapse: collapse; border: 1px solid #000;">');
                printWindow.document.write('<thead><tr style="background-color: #f2f2f2;"><th style="padding: 8px; text-align: left;">Product</th><th style="padding: 8px; text-align: left;">Price</th><th style="padding: 8px; text-align: left;">Quantity</th><th style="padding: 8px; text-align: left;">Subtotal</th></tr></thead>');
                printWindow.document.write('<tbody>');
                cartItems.forEach(item => {
                    printWindow.document.write('<tr style="border: 1px solid #000;">' + item.innerHTML + '</tr>');
                });
                printWindow.document.write('</tbody>');
                printWindow.document.write('</table>');


                var allInputs = totalAmount.querySelectorAll("input,select,textarea");
                for (var counter = 0; counter < allInputs.length; counter++) {
                    var input = allInputs.item(counter);
                    input.setAttribute("value", input.value);
                }

                // Add total amount with inline styles for formatting
                printWindow.document.write('<h2>Total Amount Calculation</h2>');
                printWindow.document.write('<div style="margin-top: 10px;">' + totalAmount.outerHTML + '</div>');

                printWindow.document.close();
                printWindow.print();
                printWindow.close();
            });


        });

    </script>
}